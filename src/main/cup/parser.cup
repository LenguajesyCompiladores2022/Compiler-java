package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.constants.Pointers;
import lyc.compiler.files.*;
import lyc.compiler.symbolTable.SymbolTableGenerator;

class Parser;

parser code{:
	private TreeIntermediateCode intermediateCode = new TreeIntermediateCode();
	private int indice = 0;
	private AllEquals allEquals = new AllEquals();
	private DoCase doCase = new DoCase(this.intermediateCode);
	private int cont = 0;
	private String tipoDato;
	private SymbolTableGenerator symbolTable = SymbolTableGenerator.getInstance();
:}
// Terminals
terminal NUMERAL;
terminal INCLUDE;
terminal PUNTO;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal MAIN;
terminal ELSE;
terminal CORCH_ABRE;
terminal CORCH_CIERRA;
terminal ASIGNACION;
terminal PUNTO_COMA;
terminal SYS_OUT;
terminal SYS_IN;
terminal AND;
terminal OR;
terminal POINTER;
terminal BARRA;
terminal ASTERISCO;
terminal SALTO_LINEA;
terminal COMENTARIO_MULTI;
terminal COMENTARIO_SINGLE;

terminal CTE;
terminal ID;
terminal OP_SUM;
terminal OP_MUL;
terminal OP_RES;
terminal OP_DIV;
terminal PA;
terminal PC;
terminal IF;
terminal WHILE;
terminal COMA;
terminal TEXTO;
terminal DISTINTO;
terminal NEGADO;
terminal IGUAL_IGUAL;
terminal MENOR_IGUAL;
terminal MAYOR_IGUAL;
terminal MENOR;
terminal MAYOR;
terminal LLA;
terminal LLC;
terminal CTE_REAL;
terminal INIT;
terminal ALL_EQUAL;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;

// Non Terminals
non terminal sentencia;
non terminal asignacion;
non terminal iteracion;

non terminal condicion;
non terminal comparacion;
non terminal comparador;

non terminal expresion;
non terminal tipoDato;
non terminal termino;
non terminal factor;
non terminal bloque;
non terminal programa;
non terminal seleccion;
non terminal declaracion;
non terminal lista;
non terminal ladoIzquierdo;
non terminal inicial;
non terminal printf;
non terminal scanf;
non terminal inicializacion;
non terminal listaDeclaracion;
non terminal array;
non terminal elementos;
non terminal parametros;
non terminal allEquals;
non terminal doCase;
non terminal bloqueDo;
non terminal caso;
non terminal ifHeader;
non terminal ladoDerecho;

// Start Symbol Definition
start with inicial;

//programa	::= bloque {: System.out.println("REGLA 0 -- Programa"); :};
inicial		::= 	{: intermediateCode.asignarNULL(Pointers.Pptr); :} programa	{:/*intermediateCode.asignar(Pointers.Iptr,Pointers.Pptr);*/ IntermediateCodeGenerator.getInstance().setIntermediateCode(intermediateCode);:};
inicial		::=													;
programa	::= 	programa sentencia 							{: intermediateCode.crearNodo(Pointers.Pptr,"prog",Pointers.Pptr,Pointers.Sptr); /*doCase.apilarPrograma(); cont++;*/ System.out.println("REGLA 1 -- programa <-- sentencia"); :};
programa	::= 	sentencia									{: intermediateCode.asignar(Pointers.Pptr,Pointers.Sptr); /*doCase.apilarCont(cont); cont = 1; doCase.apilarPrograma();*/ System.out.println("REGLA 2 -- programa <-- sentencia"); :};

sentencia	::= 	asignacion 									{: intermediateCode.asignar(Pointers.Sptr,Pointers.Aptr); System.out.println("REGLA 3 -- sentencia <-- asignacion "); :};
sentencia 	::= 	inicializacion								{: System.out.println("REGLA 4 -- sentencia <-- inicializacion"); :};
sentencia 	::= 	iteracion 									{: intermediateCode.asignar(Pointers.Sptr,Pointers.Iptr); System.out.println("REGLA 5 -- sentencia <-- iteracion"); :};
sentencia	::= 	seleccion									{: intermediateCode.asignar(Pointers.Sptr,Pointers.SELptr); System.out.println("REGLA 6 -- sentencia <-- seleccion"); :};
sentencia 	::=		printf										{: intermediateCode.asignar(Pointers.Sptr,"READptr"); System.out.println("REGLA 7 -- sentencia <-- printf"); :};
sentencia	::=		scanf										{: intermediateCode.asignar(Pointers.Sptr,"WRITEptr"); System.out.println("REGLA 8 -- sentencia <-- scanf"); :};
sentencia	::=		allEquals									{: intermediateCode.asignar(Pointers.Sptr,Pointers.AEptr); System.out.println("REGLA 9 -- sentencia <-- allEquals");:};
sentencia	::=		doCase										{: intermediateCode.asignar(Pointers.Sptr,"DOCASEptr");:};

asignacion	::= 	tipoDato ladoIzquierdo expresion PUNTO_COMA {: System.out.println("REGLA 10 -- asignaci贸n con tipo de dato"); :};
asignacion	::= 	ID:id {:symbolTable.verifyType(id.toString());:} ASIGNACION ladoDerecho PUNTO_COMA {: intermediateCode.crearHoja(Pointers.AUXptr,id.toString()); intermediateCode.crearNodo(Pointers.Aptr,"=",Pointers.AUXptr,"LDptr"); System.out.println("REGLA 11 -- asignaci贸n"); :};

ladoDerecho ::= expresion {: intermediateCode.asignar("LDptr",Pointers.Eptr); :};
ladoDerecho ::= allEquals {: intermediateCode.asignar("LDptr",Pointers.AEptr); :};
//ladoIzquierdo::=	ladoIzquierdo ID ASIGNACION					{: System.out.println("REGLA 12 -- asignaci贸n"); :};
//ladoIzquierdo::=	ID ASIGNACION								{: System.out.println("REGLA 13 -- asignaci贸n"); :};

inicializacion::=   INIT LLA listaDeclaracion LLC PUNTO_COMA	{: System.out.println("REGLA 14 -- inicializacion"); :};
listaDeclaracion::=	listaDeclaracion declaracion				{: System.out.println("REGLA 15 -- listaDeclaracion <-- listaDeclaracion declaracion ;"); :};
listaDeclaracion::= declaracion									{: System.out.println("REGLA 16 -- listaDeclaracion <-- declaracion ;"); :};
//declaracion	::=		tipoDato lista ASIGNACION expresion PUNTO_COMA	{: System.out.println("REGLA 17 -- declaracion <-- tipoDato lista ;"); :};
declaracion	::=		tipoDato lista PUNTO_COMA					{: System.out.println("REGLA 17bis -- declaracion <-- tipoDato lista ;"); :};
lista		::= 	lista COMA ID:id							{: symbolTable.addDataType(id.toString(),tipoDato);System.out.println("REGLA 18 -- lista <-- lista , id"); :};
lista		::=		ID:id										{: symbolTable.addDataType(id.toString(),tipoDato); System.out.println("REGLA 19 -- lista <-- id"); :};

tipoDato	::= 	INTEGER: entero 							{: tipoDato = entero.toString(); System.out.println("REGLA 20 -- Integer: " + entero); :};
tipoDato	::= 	FLOAT: decimal 								{: tipoDato = decimal.toString(); System.out.println("REGLA 21 -- Float: " + decimal); :};
tipoDato	::= 	STRING: string 								{: tipoDato = string.toString(); System.out.println("REGLA 22 -- string: " + string); :};

iteracion 	::= 	WHILE:_while {: intermediateCode.preSentenciaControl(); :} PA condicion {: intermediateCode.apilarCondicion(Pointers.CONDptr); :} PC LLA programa LLC {: intermediateCode.postSentenciaControl(_while.toString()); System.out.println("REGLA 23 -- iteracion <-- While"); :};

ifHeader	::= 	IF:_if {: intermediateCode.preSentenciaControl(); :}PA condicion {: intermediateCode.apilarCondicion(Pointers.CONDptr); :} PC;
seleccion	::=		ifHeader LLA programa LLC {: intermediateCode.postSentenciaControl("if"); System.out.println("REGLA 24 -- seleccion <-- if solo"); :};
seleccion	::= 	ifHeader LLA programa LLC {: intermediateCode.apilarNodo(Pointers.Pptr); :}ELSE LLA programa LLC {: intermediateCode.desapilarNodo(Pointers.AUXptr); intermediateCode.crearNodo("CUERPOptr","cuerpo",Pointers.AUXptr,Pointers.Pptr); intermediateCode.asignar(Pointers.Pptr,"CUERPOptr"); intermediateCode.postSentenciaControl("if"); System.out.println("REGLA 25 -- seleccion --> if con else"); :};

condicion 	::= 	comparacion {: intermediateCode.apilarNodo(Pointers.COMPptr); :} AND:op comparacion {: intermediateCode.desapilarNodo(Pointers.CONDptr); intermediateCode.crearNodo(Pointers.CONDptr,op.toString(),Pointers.CONDptr,Pointers.COMPptr); System.out.println("REGLA 26 -- condicion <-- condicion and comparacion"); :};
condicion 	::= 	comparacion {: intermediateCode.apilarNodo(Pointers.COMPptr); :} OR:op comparacion  {: intermediateCode.desapilarNodo(Pointers.CONDptr); intermediateCode.crearNodo(Pointers.CONDptr,op.toString(),Pointers.CONDptr,Pointers.COMPptr); System.out.println("REGLA 27 -- condicion <-- condicion or comparacion"); :};
condicion	::= 	comparacion 					{: intermediateCode.asignar(Pointers.CONDptr,Pointers.COMPptr); System.out.println("REGLA 28 -- condicion <-- comparacion"); :};
//condicion	::= 	expresion 						{: System.out.println("REGLA 29 -- condicion <-- expresion"); :};
condicion 	::=		NEGADO comparacion				{: intermediateCode.crearNodo(Pointers.CONDptr,"!",Pointers.COMPptr,null); System.out.println("REGLA 30 -- condicion <-- !comparacion");:};
condicion	::= 	NEGADO expresion 				{: intermediateCode.crearNodo(Pointers.CONDptr,"!",Pointers.Eptr,null); System.out.println("REGLA 31 -- condicion <-- !expresion"); :};

comparacion ::= 	expresion {: intermediateCode.apilarNodo(Pointers.Eptr); :} comparador expresion {: intermediateCode.desapilarNodo(Pointers.COMPptr); intermediateCode.crearNodo(Pointers.COMPptr,intermediateCode.desapilar(),Pointers.COMPptr,Pointers.Eptr); System.out.println("REGLA 32 -- comparacion");:};
comparador  ::= 	IGUAL_IGUAL:comp 				{: intermediateCode.apilar(comp.toString()); System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	DISTINTO:comp 					{: intermediateCode.apilar(comp.toString()); System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MAYOR_IGUAL:comp 				{: intermediateCode.apilar(comp.toString()); System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MENOR_IGUAL:comp				{: intermediateCode.apilar(comp.toString()); System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MAYOR:comp						{: intermediateCode.apilar(comp.toString()); System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MENOR:comp						{: intermediateCode.apilar(comp.toString()); System.out.println("REGLA 33 -- CMP " + comp); :};

printf		::=		SYS_OUT PA factor PC PUNTO_COMA {: intermediateCode.crearNodo("READptr","READ",Pointers.Fptr,null); System.out.println("REGLA 34 -- printf "); :};

scanf		::=		SYS_IN PA ID:id {: symbolTable.verifyType(id.toString()); :} PC PUNTO_COMA 	{: intermediateCode.crearHoja("IDptr",id.toString()); intermediateCode.crearNodo("WRITEptr","WRITE","IDptr",null); System.out.println("REGLA 35 -- scanf "); :};

allEquals	::=		ALL_EQUAL PA parametros PC PUNTO_COMA {: allEquals.crearArbol(intermediateCode); System.out.println("REGLA 36 -- allEquals "); symbolTable.addToken("@result","int"); :};
parametros	::=		parametros COMA array			{: allEquals.incrementarCantArrays(); System.out.println("REGLA 37 -- parametros <-- parametros, array "); :};
parametros	::=		array							{: allEquals.incrementarCantArrays(); System.out.println("REGLA 38 -- parametros <-- array "); :};
array		::= 	CORCH_ABRE elementos CORCH_CIERRA {: System.out.println("REGLA 39 -- array <-- [elementos] "); :};
elementos	::=		elementos COMA expresion		{: allEquals.insertar(intermediateCode.obtenerNodo(Pointers.Eptr)); System.out.println("REGLA 40 -- elementos <-- elementos, expresion "); :};
elementos	::= 	expresion						{: allEquals.insertar(intermediateCode.obtenerNodo(Pointers.Eptr)); System.out.println("REGLA 41 -- elementos <-- expresion "); :};

doCase		::=		DO ID:id {: intermediateCode.preSentenciaControl(); symbolTable.verifyType(id.toString()) ;intermediateCode.asignarNULL("DEFAULTptr"); /*guardarId();*/ :}bloqueDo ENDDO {: doCase.crearArbol(intermediateCode); intermediateCode.desapilarNodo(Pointers.Pptr); System.out.println("REGLA 42 -- doCase "); :};
bloqueDo	::=		caso							{: doCase.apilarCont(0); System.out.println("REGLA 43 -- bloqueDo <-- caso "); :};
bloqueDo	::=		bloqueDo caso					{: doCase.incrementarContador(); System.out.println("REGLA 44 -- bloqueDo <-- bloqueDo caso "); :};
caso		::=		CASE condicion {: intermediateCode.apilarCondicion(Pointers.CONDptr); :} programa {: intermediateCode.apilarNodo(Pointers.Pptr); System.out.println("REGLA 45 -- caso <-- CASE condicion programa"); :};
caso		::=		DEFAULT programa 				{: doCase.decrementarContador(); intermediateCode.asignar("DEFAULTptr",Pointers.Pptr); System.out.println("REGLA 46 -- caso <-- default programa"); :};

expresion	::= 	expresion {:intermediateCode.apilarNodo(Pointers.Eptr);:}OP_SUM:op termino 	{: intermediateCode.desapilarNodo(Pointers.Eptr); intermediateCode.crearNodo(Pointers.Eptr,op.toString(),Pointers.Eptr,Pointers.Tptr); System.out.println("REGLA 47 -- +"); :};
expresion	::= 	expresion {:intermediateCode.apilarNodo(Pointers.Eptr);:}OP_RES:op termino 	{: intermediateCode.desapilarNodo(Pointers.Eptr); intermediateCode.crearNodo(Pointers.Eptr,op.toString(),Pointers.Eptr,Pointers.Tptr); System.out.println("REGLA 48 -- -"); :};
expresion	::= 	termino 						{: intermediateCode.asignar(Pointers.Eptr,Pointers.Tptr); System.out.println("REGLA 49 -- expresion <-- termino"); :};

termino		::= 	termino {:intermediateCode.apilarNodo(Pointers.Tptr);:}OP_MUL:op factor {: intermediateCode.desapilarNodo(Pointers.Tptr); intermediateCode.crearNodo(Pointers.Tptr,op.toString(),Pointers.Tptr,Pointers.Fptr); System.out.println("REGLA 50 -- *"); :};
termino		::= 	termino {:intermediateCode.apilarNodo(Pointers.Tptr);:}OP_DIV:op factor {: intermediateCode.desapilarNodo(Pointers.Tptr); intermediateCode.crearNodo(Pointers.Tptr,op.toString(),Pointers.Tptr,Pointers.Fptr); System.out.println("REGLA 51 -- /"); :};
termino		::= 	factor 							{: intermediateCode.asignar(Pointers.Tptr,Pointers.Fptr); System.out.println("REGLA 52 -- Termino <-- factor"); :};

factor		::= 	ID:id  							{: intermediateCode.crearHoja(Pointers.Fptr,id.toString()); symbolTable.verifyType(id.toString()); System.out.println("REGLA 53 -- Id: " + id); :};
factor		::= 	CTE:constant 					{: intermediateCode.crearHoja(Pointers.Fptr,constant.toString()); System.out.println("REGLA 54 -- constante entera: " + constant ); :};
factor		::= 	TEXTO:string 					{: intermediateCode.crearHoja(Pointers.Fptr,string.toString()); 			  System.out.println("REGLA 55 -- constante TEXTO: " + string ); :};
factor		::=		CTE_REAL:cteReal				{: intermediateCode.crearHoja(Pointers.Fptr,cteReal.toString());  System.out.println("REGLA 56 -- constante real: " + cteReal ); :};
factor		::= 	PA expresion PC 				{: intermediateCode.asignar(Pointers.Fptr,Pointers.Eptr); System.out.println(" REGLA 57 -- Factor <-- (expresion)"); :};