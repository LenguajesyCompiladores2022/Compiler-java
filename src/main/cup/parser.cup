package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal NUMERAL;
terminal INCLUDE;
terminal PUNTO;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal MAIN;
terminal ELSE;
terminal CORCH_ABRE;
terminal CORCH_CIERRA;
terminal ASIGNACION;
terminal PUNTO_COMA;
terminal SYS_OUT;
terminal SYS_IN;
terminal AND;
terminal OR;
terminal POINTER;
terminal BARRA;
terminal ASTERISCO;
terminal SALTO_LINEA;
terminal COMENTARIO_MULTI;
terminal COMENTARIO_SINGLE;

terminal CTE;
terminal ID;
terminal OP_SUM;
terminal OP_MUL;
terminal OP_RES;
terminal OP_DIV;
terminal PA;
terminal PC;
terminal IF;
terminal WHILE;
terminal COMA;
terminal TEXTO;
terminal DISTINTO;
terminal NEGADO;
terminal IGUAL_IGUAL;
terminal MENOR_IGUAL;
terminal MAYOR_IGUAL;
terminal MENOR;
terminal MAYOR;
terminal LLA;
terminal LLC;
terminal CTE_REAL;
terminal INIT;
terminal ALL_EQUAL;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;

// Non Terminals
non terminal sentencia;
non terminal asignacion;
non terminal iteracion;

non terminal condicion;
non terminal comparacion;
non terminal comparador;

non terminal expresion;
non terminal tipoDato;
non terminal termino;
non terminal factor;
non terminal bloque;
non terminal programa;
non terminal seleccion;
non terminal declaracion;
non terminal lista;
non terminal ladoIzquierdo;
non terminal inicial;
non terminal printf;
non terminal scanf;
non terminal inicializacion;
non terminal listaDeclaracion;
non terminal array;
non terminal elementos;
non terminal parametros;
non terminal allEquals;
non terminal doCase;
non terminal bloqueDo;
non terminal caso;

// Start Symbol Definition
start with inicial;

//programa	::= bloque {: System.out.println("REGLA 0 -- Programa"); :};
inicial		::= 	programa;
inicial		::=													{: System.out.println("ARCHIVO VACIO"); :};
programa	::= 	programa sentencia 							{: System.out.println("REGLA 1 -- programa <-- sentencia"); :};
programa	::= 	sentencia									{: System.out.println("REGLA 2 -- programa <-- sentencia"); :};

sentencia	::= 	asignacion 									{: System.out.println("REGLA 3 -- sentencia <-- asignacion "); :};
sentencia 	::= 	inicializacion								{: System.out.println("REGLA 4 -- sentencia <-- inicializacion"); :};
sentencia 	::= 	iteracion 									{: System.out.println("REGLA 5 -- sentencia <-- iteracion"); :};
sentencia	::= 	seleccion 									{: System.out.println("REGLA 6 -- sentencia <-- seleccion"); :};
sentencia 	::=		printf										{: System.out.println("REGLA 7 -- sentencia <-- printf"); :};
sentencia	::=		scanf										{: System.out.println("REGLA 8 -- sentencia <-- scanf"); :};
sentencia	::=		allEquals									{: System.out.println("REGLA 9 -- sentencia <-- allEquals");:};
sentencia	::=		doCase;

asignacion	::= 	tipoDato ladoIzquierdo expresion PUNTO_COMA {: System.out.println("REGLA 10 -- asignaci贸n con tipo de dato"); :};
asignacion	::= 	ladoIzquierdo expresion PUNTO_COMA 			{: System.out.println("REGLA 11 -- asignaci贸n"); :};
ladoIzquierdo::=	ladoIzquierdo ID ASIGNACION					{: System.out.println("REGLA 12 -- asignaci贸n"); :};
ladoIzquierdo::=	ID ASIGNACION								{: System.out.println("REGLA 13 -- asignaci贸n"); :};

inicializacion::=   INIT LLA listaDeclaracion LLC PUNTO_COMA	{: System.out.println("REGLA 14 -- inicializacion"); :};
listaDeclaracion::=	listaDeclaracion declaracion				{: System.out.println("REGLA 15 -- listaDeclaracion <-- listaDeclaracion declaracion ;"); :};
listaDeclaracion::= declaracion									{: System.out.println("REGLA 16 -- listaDeclaracion <-- declaracion ;"); :};
declaracion	::=		tipoDato lista ASIGNACION expresion PUNTO_COMA{: System.out.println("REGLA 17 -- declaracion <-- tipoDato lista ;"); :};
declaracion	::=		tipoDato lista PUNTO_COMA					{: System.out.println("REGLA 17bis -- declaracion <-- tipoDato lista ;"); :};
lista		::= 	lista COMA ID								{: System.out.println("REGLA 18 -- lista <-- lista , id"); :};
lista		::=		ID											{: System.out.println("REGLA 19 -- lista <-- id"); :};

tipoDato	::= 	INTEGER: entero 							{: System.out.println("REGLA 20 -- Integer: " + entero); :};
tipoDato	::= 	FLOAT: decimal 								{: System.out.println("REGLA 21 -- Float: " + decimal); :};
tipoDato	::= 	STRING: string 								{: System.out.println("REGLA 22 -- string: " + string); :};

iteracion 	::= 	WHILE PA condicion PC LLA programa LLC 		{: System.out.println("REGLA 23 -- iteracion <-- While"); :};

seleccion 	::= 	IF PA condicion PC LLA programa LLC 		{: System.out.println("REGLA 24 -- seleccion <-- if solo"); :};
seleccion 	::= 	IF PA condicion PC LLA programa LLC ELSE LLA programa LLC {: System.out.println("REGLA 25 -- seleccion --> if con else"); :};

condicion 	::= 	comparacion AND comparacion 	{: System.out.println("REGLA 26 -- condicion <-- condicion and comparacion"); :};
condicion 	::= 	comparacion OR comparacion 		{: System.out.println("REGLA 27 -- condicion <-- condicion or comparacion"); :};
condicion	::= 	comparacion 					{: System.out.println("REGLA 28 -- condicion <-- comparacion"); :};
//condicion	::= 	expresion 						{: System.out.println("REGLA 29 -- condicion <-- expresion"); :};
condicion 	::=		NEGADO comparacion				{: System.out.println("REGLA 30 -- condicion <-- !comparacion");:};
condicion	::= 	NEGADO expresion 				{: System.out.println("REGLA 31 -- condicion <-- !expresion"); :};

comparacion ::= 	expresion comparador expresion 	{: System.out.println("REGLA 32 -- comparacion"); :};
comparador  ::= 	IGUAL_IGUAL:comp 				{: System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	DISTINTO:comp 					{: System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MAYOR_IGUAL:comp 				{: System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MENOR_IGUAL:comp				{: System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MAYOR:comp						{: System.out.println("REGLA 33 -- CMP " + comp); :};
comparador  ::= 	MENOR:comp						{: System.out.println("REGLA 33 -- CMP " + comp); :};

printf		::=		SYS_OUT PA factor PC PUNTO_COMA {: System.out.println("REGLA 34 -- printf "); :};

scanf		::=		SYS_IN PA ID PC PUNTO_COMA 		{: System.out.println("REGLA 35 -- scanf "); :};

allEquals	::=		ALL_EQUAL PA parametros PC PUNTO_COMA {: System.out.println("REGLA 36 -- allEquals "); :};
parametros	::=		parametros COMA array			{: System.out.println("REGLA 37 -- parametros <-- parametros, array "); :};
parametros	::=		array							{: System.out.println("REGLA 38 -- parametros <-- array "); :};
array		::= 	CORCH_ABRE elementos CORCH_CIERRA {: System.out.println("REGLA 39 -- array <-- [elementos] "); :};
elementos	::=		elementos COMA expresion		{: System.out.println("REGLA 40 -- elementos <-- elementos, expresion "); :};
elementos	::= 	expresion						{: System.out.println("REGLA 41 -- elementos <-- expresion "); :};

doCase		::=		DO ID bloqueDo ENDDO			{: System.out.println("REGLA 42 -- doCase "); :};
bloqueDo	::=		caso							{: System.out.println("REGLA 43 -- bloqueDo <-- caso "); :};
bloqueDo	::=		bloqueDo caso					{: System.out.println("REGLA 44 -- bloqueDo <-- bloqueDo caso "); :};
caso		::=		CASE condicion programa			{: System.out.println("REGLA 45 -- caso <-- CASE condicion programa"); :};
caso		::=		DEFAULT programa 				{: System.out.println("REGLA 46 -- caso <-- default programa"); :};

expresion	::= 	expresion OP_SUM termino 		{: System.out.println("REGLA 47 -- +"); :};
expresion	::= 	expresion OP_RES termino 		{: System.out.println("REGLA 48 -- -"); :};
expresion	::= 	termino 						{: System.out.println("REGLA 49 -- expresion <-- termino"); :};

termino		::= 	termino OP_MUL factor 			{: System.out.println("REGLA 50 -- *"); :};
termino		::= 	termino OP_DIV factor 			{: System.out.println("REGLA 51 -- /"); :};
termino		::= 	factor 							{: System.out.println("REGLA 52 -- Termino <-- factor"); :};

factor		::= 	ID:id  							{: System.out.println("REGLA 53 -- Id: " + id); :};
factor		::= 	CTE:constant 					{: System.out.println("REGLA 54 -- constante entera: " + constant ); :};
factor		::= 	TEXTO:string 					{: System.out.println("REGLA 55 -- constante TEXTO: " + string ); :};
factor		::=		CTE_REAL:cteReal				{: System.out.println("REGLA 56 -- constante real: " + cteReal ); :};
factor		::= 	PA expresion PC 				{: System.out.println("REGLA 57 -- Factor <-- (expresion)"); :};